name: Configure Repository Labels
run-name: "#${{ github.event.issue.number }}"
permissions:
  issues: write
on:
  issue_comment:
    types: [ created ]
jobs:
  acknowledge-command:
    runs-on: ubuntu-latest
    steps:
      - name: Filter command input
        id: filter
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const command = context.payload.comment.body.trim()
            return { isConfigureCommand: command.startsWith('/configure-default-labels') ? 'true' : 'false' }
      - name: Acknowledge command comment
        if: steps.filter.outputs.isConfigureCommand == 'true'
        id: initial_ack
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ackComment = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `> [!NOTE]
            > Command \'/configure-default-labels\' acknowledged. Adding the labels.`
            })
            console.log('Command acknowledged')
            return { comment_id: ackComment.data.id }
      - name: Check for missing labels
        if: steps.filter.outputs.isConfigureCommand == 'true'
        id: check_labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const requiredLabels = ['major', 'minor', 'patch']
            const { data: labels } = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            const existingLabels = labels.map(label => label.name)
            const missingLabels = requiredLabels.filter(label => !existingLabels.includes(label))
            return { missingLabels: missingLabels.join(', ') }
